function o=ShiftPointIntoRect(o,ff,name,xy,radiusDeg,r)
% o=ShiftPointIntoRect(o,ff,name,xy,radiusDeg,r)
% If necessary and o.okToShiftCoordinates then adjust the near-point
% eccentricity o.nearPointXYDeg to fit an object (e.g. the target) with
% specified eccentricity (corresponding to xy) fits on the screen.
%
% This routine was written for NoiseDiscrimination. For compatibility with
% CriticalSpacing, it now also accepts targetHeightDeg or targetDeg, whichever
% is available.
% DGP, December 2019.
radius=round(o.pixPerDeg*radiusDeg);
r=InsetRect(r,radius,radius);
if ~IsXYInRect(xy,r) % Is fixation off screen?
    if o.okToShiftCoordinates
        % Adjust near-point eccentricity o.nearPointXYDeg so "name" fits on
        % screen. Place it at nearest visible point of screen.
        newXY=LimitXYToRect(xy,r);
        % Update o.nearPointXYDeg.
        oldNearPointXYDeg=o.nearPointXYDeg;
        o.nearPointXYDeg=o.nearPointXYDeg+XYDegOfXYPix(o,newXY)-XYDegOfXYPix(o,xy);
        ffprintf(ff,['NOTE: Adjusting near-point eccentricity o.nearPointXYDeg from ' ...
            '[%.1f %.1f] deg to [%.1f %.1f] deg to fit %s ' ...
            '(with %.1f deg radius) on screen.'],...
            oldNearPointXYDeg,o.nearPointXYDeg,name,radiusDeg);
    else
        if ~isfield(o,'condition')
            o.condition=[];
        end
        % Convert o.stimulusRect from pix to deg.
        sDeg=[XYDegOfXYPix(o,o.stimulusRect(1:2)) XYDegOfXYPix(o,o.stimulusRect(3:4))];
        sDeg=[sDeg(1) sDeg(4) sDeg(3) sDeg(2)]; % Convert Apple to normal coordinates.
        if isfield('targetDeg',o)
            ffprintf(ff,['Condition %d ''%s'':\n' ...
                'o.targetDeg %.1f, ' ...
                'radiusDeg %.1f, ' ...
                'o.eccentricityXYDeg (%.0f %.0f), ' ...
                'usable screen [%.0f %.0f %.0f %.0f] deg.\n'], ...
                o.condition,o.conditionName,o.targetDeg,...
                radiusDeg,o.eccentricityXYDeg,sDeg);
        elseif isfield('targetHeightDeg',o)
            ffprintf(ff,['Condition %d ''%s'':\n' ...
                'o.targetHeightDeg %.1f, ' ...
                'radiusDeg %.1f, ' ...
                'o.eccentricityXYDeg (%.0f %.0f), ' ...
                'usable screen [%.0f %.0f %.0f %.0f] deg.\n'], ...
                o.condition,o.conditionName,o.targetHeightDeg,...
                radiusDeg,o.eccentricityXYDeg,sDeg);
        end
        allowedDeg=InsetRect(sDeg,radiusDeg,radiusDeg);
        ffprintf(ff,'Target center xy (%.0f %.0f) should be inside screen rect [%.0f %.0f %.0f %.0f].\n',...
            xy,r);
        ffprintf(ff,'Target center at [%.0f %.0f] deg should be in [%.0f %.0f %.0f %.0f] deg.\n',...
            o.eccentricityXYDeg,allowedDeg);
        error(['Sorry, %s doesn''t fit on screen ' ...
            'and it''s not o.okToShiftCoordinates. You might try ' ...
            'reducing the o.viewingDistanceCm %.1f, ' ...
            'or adjusting the o.nearPointXYInUnitSquare [%.1f %.1f].'],...
            name,o.viewingDistanceCm,...
            o.nearPointXYInUnitSquare(1),o.nearPointXYInUnitSquare(2));
    end
end