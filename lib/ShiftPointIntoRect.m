function o=ShiftPointIntoRect(o,ff,name,xy,radiusDeg,r)
% o=ShiftPointIntoRect(o,ff,name,xy,radiusDeg,r)
% If necessary and o.okToShiftCoordinates then adjust the near-point
% eccentricity o.nearPointXYDeg to fit an object (e.g. the target) with
% specified eccentricity (corresponding to xy) fits on the screen.
radius=o.pixPerDeg*radiusDeg;
r=InsetRect(r,radius,radius);
if ~IsXYInRect(xy,r) % Is fixation off screen?
    if o.okToShiftCoordinates
        % Adjust near-point eccentricity o.nearPointXYDeg so "name" fits on
        % screen. Place it at nearest visible point of screen.
        newXY=LimitXYToRect(xy,r);
        % Update o.nearPointXYDeg.
        oldNearPointXYDeg=o.nearPointXYDeg;
        o.nearPointXYDeg=o.nearPointXYDeg+XYDegOfXYPix(o,newXY)-XYDegOfXYPix(o,xy);
        ffprintf(ff,['NOTE: Adjusting near-point eccentricity o.nearPointXYDeg from ' ...
            '[%.1f %.1f] deg to [%.1f %.1f] deg to fit %s ' ...
            '(with %.1f deg radius) on screen.'],...
            oldNearPointXYDeg,o.nearPointXYDeg,name,radiusDeg);
    else
        xyDeg=XYDegOfXYPix(o,o.stimulusRect(3:4))-XYDegOfXYPix(o,o.stimulusRect(1:2));
        xyDeg(2)=-xyDeg(2); % Apple y increases downward.
        if ~isfield(o,'condition')
            o.condition=[];
        end
        ffprintf(ff,['Condition %d ''%s'':\n' ...
            'o.targetHeightDeg %.1f, ' ...
            'o.eccentricityXYDeg (%.0f %.0f), usable screen %.0f deg x %.0f deg.\n'], ...
            o.condition,o.conditionName,o.targetHeightDeg,...
            o.eccentricityXYDeg,xyDeg);
        error(['Sorry, %s doesn''t fit on screen ' ...
            'and it''s not o.okToShiftCoordinates. You might try ' ...
            'reducing the o.viewingDistanceCm %.1f, ' ...
            'or adjusting the o.nearPointXYInUnitSquare [%.1f %.1f].'],...
            name,o.viewingDistanceCm,...
            o.nearPointXYInUnitSquare(1),o.nearPointXYInUnitSquare(2));
    end
end